/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedDashboardIndexImport } from './routes/_authenticated/dashboard/index'
import { Route as AuthenticatedDashboardFilesImport } from './routes/_authenticated/dashboard/files'
import { Route as AuthenticatedDashboardFileUuidImport } from './routes/_authenticated/dashboard/file.$uuid'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)

const AuthenticatedDashboardFilesRoute =
  AuthenticatedDashboardFilesImport.update({
    id: '/files',
    path: '/files',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)

const AuthenticatedDashboardFileUuidRoute =
  AuthenticatedDashboardFileUuidImport.update({
    id: '/file/$uuid',
    path: '/file/$uuid',
    getParentRoute: () => AuthenticatedDashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/dashboard/files': {
      id: '/_authenticated/dashboard/files'
      path: '/files'
      fullPath: '/dashboard/files'
      preLoaderRoute: typeof AuthenticatedDashboardFilesImport
      parentRoute: typeof AuthenticatedDashboardImport
    }
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthenticatedDashboardIndexImport
      parentRoute: typeof AuthenticatedDashboardImport
    }
    '/_authenticated/dashboard/file/$uuid': {
      id: '/_authenticated/dashboard/file/$uuid'
      path: '/file/$uuid'
      fullPath: '/dashboard/file/$uuid'
      preLoaderRoute: typeof AuthenticatedDashboardFileUuidImport
      parentRoute: typeof AuthenticatedDashboardImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedDashboardRouteChildren {
  AuthenticatedDashboardFilesRoute: typeof AuthenticatedDashboardFilesRoute
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
  AuthenticatedDashboardFileUuidRoute: typeof AuthenticatedDashboardFileUuidRoute
}

const AuthenticatedDashboardRouteChildren: AuthenticatedDashboardRouteChildren =
  {
    AuthenticatedDashboardFilesRoute: AuthenticatedDashboardFilesRoute,
    AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
    AuthenticatedDashboardFileUuidRoute: AuthenticatedDashboardFileUuidRoute,
  }

const AuthenticatedDashboardRouteWithChildren =
  AuthenticatedDashboardRoute._addFileChildren(
    AuthenticatedDashboardRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRoute: AuthenticatedDashboardRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/dashboard/files': typeof AuthenticatedDashboardFilesRoute
  '/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/dashboard/file/$uuid': typeof AuthenticatedDashboardFileUuidRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard/files': typeof AuthenticatedDashboardFilesRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/dashboard/file/$uuid': typeof AuthenticatedDashboardFileUuidRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteWithChildren
  '/_authenticated/dashboard/files': typeof AuthenticatedDashboardFilesRoute
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/_authenticated/dashboard/file/$uuid': typeof AuthenticatedDashboardFileUuidRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/dashboard'
    | '/dashboard/files'
    | '/dashboard/'
    | '/dashboard/file/$uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/dashboard/files'
    | '/dashboard'
    | '/dashboard/file/$uuid'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/dashboard/files'
    | '/_authenticated/dashboard/'
    | '/_authenticated/dashboard/file/$uuid'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/dashboard/files",
        "/_authenticated/dashboard/",
        "/_authenticated/dashboard/file/$uuid"
      ]
    },
    "/_authenticated/dashboard/files": {
      "filePath": "_authenticated/dashboard/files.tsx",
      "parent": "/_authenticated/dashboard"
    },
    "/_authenticated/dashboard/": {
      "filePath": "_authenticated/dashboard/index.tsx",
      "parent": "/_authenticated/dashboard"
    },
    "/_authenticated/dashboard/file/$uuid": {
      "filePath": "_authenticated/dashboard/file.$uuid.tsx",
      "parent": "/_authenticated/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
